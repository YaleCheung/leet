!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.7	//
AddTwoNumbers	.\add_two_numbers\program\Program.cs	/^    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {$/;"	m	class:leetcode.Solution
AddTwoNumbersHelper	.\add_two_numbers\program\Program.cs	/^    public ListNode AddTwoNumbersHelper(ListNode l1, ListNode l2, int carry) {$/;"	m	class:leetcode.Solution
CombinationSum	.\combination_sum\Program.cs	/^        public IList<IList<int>> CombinationSum(int[] candidates, int target) {$/;"	m	class:combination_sum.Program
CombinationSum	.\combination_sum\Program.cs	/^        public void CombinationSum(int[] candidates, int target, List<IList<int>> ret, List<int> list_storage, int index) {$/;"	m	class:combination_sum.Program
CombinationSum2	.\combination_sum_2\Program.cs	/^        public IList<IList<int>> CombinationSum2(int[] candidates, int target) {$/;"	m	class:combination_sum_2.Solution
CombinationSum2	.\combination_sum_2\Program.cs	/^        public void CombinationSum2(int[] candidates, int left, List<IList<int>> ret, List<int> tmp, int index) {$/;"	m	class:combination_sum_2.Solution
Convert	.\convert\Program.cs	/^        public string Convert(string s, int numRows) {$/;"	m	class:Convert.Solution
Convert	.\convert\Program.cs	/^namespace Convert$/;"	n
Divide	.\divide_two_integers\Program.cs	/^    public int Divide(int dividend, int divisor) {$/;"	m	class:Solution
FindKthSmallestElement	.\find_median_sorted_arrays\Program.cs	/^        public int FindKthSmallestElement(int[] nums1, int start1, int end1, int[] nums2, int start2, int end2, int k) {$/;"	m	class:find_median_sorted_arrays.Solution
FindMedianSortedArrays	.\find_median_sorted_arrays\Program.cs	/^        public double FindMedianSortedArrays(int[] nums1, int[] nums2) {$/;"	m	class:find_median_sorted_arrays.Solution
FindSubstring	.\find_substring\Program.cs	/^        public IList<int> FindSubstring(string s, string[] words) {$/;"	m	class:find_substring.Program
FirstMissingPositive	.\first_missing_possitive\Program.cs	/^        public int FirstMissingPositive(int[] nums) {$/;"	m	class:first_missing_possitive.Program
GenerateParenthesis	.\generate_parenthesis\Program.cs	/^        public IList<string> GenerateParenthesis(int n)$/;"	m	class:generateParenthesis.Program
Helper	.\generate_parenthesis\Program.cs	/^        private void Helper(string cur, int left_num, int right_num, int n, IList<string> ret)$/;"	m	class:generateParenthesis.Program	file:
IntToRoman	.\int2roman\Program.cs	/^        public string IntToRoman(int num) $/;"	m	class:int2roman.Program
IsPalindrome	.\palindrome_number\Program.cs	/^		public bool IsPalindrome(int x) {$/;"	m	class:palindrome_number.Solution
IsValidSudoku	.\is_valid_sudoku\Program.cs	/^        public bool IsValidSudoku(char[][] board) {$/;"	m	class:is_valid_sudoku.Program
LengthOfLongestSubstring	.\longest_substring_without_repeating_characters\Program.cs	/^    public int LengthOfLongestSubstring(string s) {$/;"	m	class:longest_substring_without_repeating_characters.Solution
LetterCombinations	.\letterCombinations\Program.cs	/^        public IList<string> LetterCombinations(string digits) {$/;"	m	class:letterCombinations.Program
LetterCombinations	.\letterCombinations\Program.cs	/^        public void LetterCombinations(string[] hash, string curStr, int pos, IList<string> ret, string digits) {$/;"	m	class:letterCombinations.Program
LetterCombinations	.\letter_combinations\Program.cs	/^        public IList<string> LetterCombinations(string digits) {$/;"	m	class:letterCombinations.Program
LetterCombinations	.\letter_combinations\Program.cs	/^        public void LetterCombinations(string[] hash, string curStr, int pos, IList<string> ret, string digits) {$/;"	m	class:letterCombinations.Program
ListNode	.\add_two_numbers\program\Program.cs	/^    public ListNode(int x) { val = x; }$/;"	m	class:leetcode.ListNode
ListNode	.\add_two_numbers\program\Program.cs	/^public class ListNode {$/;"	c	namespace:leetcode
ListNode	.\removeNthFromEnd\Program.cs	/^        public ListNode(int x) {val = x;}$/;"	m	class:removeNthFromEnd.ListNode
ListNode	.\removeNthFromEnd\Program.cs	/^    public class ListNode {$/;"	c	namespace:removeNthFromEnd
ListNode	.\remove_nth_from_end\Program.cs	/^        public ListNode(int x) {val = x;}$/;"	m	class:removeNthFromEnd.ListNode
ListNode	.\remove_nth_from_end\Program.cs	/^    public class ListNode {$/;"	c	namespace:removeNthFromEnd
ListNode	.\swapPairs\Program.cs	/^        public ListNode(int x) { val = x; }$/;"	m	class:swapPairs.ListNode
ListNode	.\swapPairs\Program.cs	/^    public class ListNode {$/;"	c	namespace:swapPairs
LongestPalindrome	.\longest_palindrome\Program.cs	/^        public string LongestPalindrome(string s) {$/;"	m	class:longest_palindrome.Solution
LongestValidParentheses	.\longest_valid_parentheses\Program.cs	/^        public int LongestValidParentheses(string s) {$/;"	m	class:longest_valid_parentheses.Program
Main	.\add_two_numbers\program\Program.cs	/^    public static void Main(string[] args) {$/;"	m	class:leetcode.Solution
Main	.\combination_sum\Program.cs	/^        static void Main(string[] args)$/;"	m	class:combination_sum.Program	file:
Main	.\convert\Program.cs	/^        static void Main(string[] args)$/;"	m	class:Convert.Solution	file:
Main	.\divide_two_integers\Program.cs	/^    static void Main(string[] args) {$/;"	m	class:Solution	file:
Main	.\find_median_sorted_arrays\Program.cs	/^        static void Main(string[] args)$/;"	m	class:find_median_sorted_arrays.Solution	file:
Main	.\find_substring\Program.cs	/^        static void Main(string[] args)$/;"	m	class:find_substring.Program	file:
Main	.\first_missing_possitive\Program.cs	/^        public static void Main(string[] args) {$/;"	m	class:first_missing_possitive.Program
Main	.\generate_parenthesis\Program.cs	/^        static void Main(string[] args)$/;"	m	class:generateParenthesis.Program	file:
Main	.\int2roman\Program.cs	/^        static void Main(string[] args)$/;"	m	class:int2roman.Program	file:
Main	.\is_match\Program.cs	/^        public static int Main(string[] args) {$/;"	m	class:is_match.Program
Main	.\is_valid_sudoku\Program.cs	/^        static void Main (string[] args) {$/;"	m	class:is_valid_sudoku.Program	file:
Main	.\letterCombinations\Program.cs	/^        static void Main(string[] args)$/;"	m	class:letterCombinations.Program	file:
Main	.\letter_combinations\Program.cs	/^        static void Main(string[] args)$/;"	m	class:letterCombinations.Program	file:
Main	.\longest_palindrome\Program.cs	/^        static void Main(string[] args)$/;"	m	class:longest_palindrome.Solution	file:
Main	.\longest_substring_without_repeating_characters\Program.cs	/^    public static void Main(string[] args) {$/;"	m	class:longest_substring_without_repeating_characters.Solution
Main	.\longest_valid_parentheses\Program.cs	/^        static void Main(string[] args)$/;"	m	class:longest_valid_parentheses.Program	file:
Main	.\max_area\Program.cs	/^    public static void Main(string[] args) {$/;"	m	class:Program
Main	.\next_permutation\Program.cs	/^        static void Main(string[] args)$/;"	m	class:next_permutation.Program	file:
Main	.\palindrome_number\Program.cs	/^        static void Main(string[] args)$/;"	m	class:palindrome_number.Solution	file:
Main	.\permute\Program.cs	/^        static void Main(string[] args)$/;"	m	class:permute.Program	file:
Main	.\removeNthFromEnd\Program.cs	/^        static void Main(string[] args)$/;"	m	class:removeNthFromEnd.Program	file:
Main	.\remove_nth_from_end\Program.cs	/^        static void Main(string[] args)$/;"	m	class:removeNthFromEnd.Program	file:
Main	.\reverse_int\Program.cs	/^        static void Main(string[] args)$/;"	m	class:reverse_int.Solution	file:
Main	.\search\Program.cs	/^        static void Main(string[] args)$/;"	m	class:search.Program	file:
Main	.\search_range\Program.cs	/^        static int Main(string[] args)$/;"	m	class:search_range.Program	file:
Main	.\swapPairs\Program.cs	/^        static void Main(string[] args)$/;"	m	class:swapPairs.Program	file:
Main	.\three_sum\Program.cs	/^        static void Main(string[] args)$/;"	m	class:three_sum.Program	file:
Main	.\three_sum_closest\Program.cs	/^        static void Main(string[] args)$/;"	m	class:three_sum_closest.Program	file:
Main	.\trapping_rain_water\Program.cs	/^        static void Main(string[] args)$/;"	m	class:trapping_rain_water.Solution	file:
Main	.\two_sum\Program.cs	/^    public static void Main(string[] args) {$/;"	m	class:Solution
MaxArea	.\max_area\Program.cs	/^    public int MaxArea(int[] height) {$/;"	m	class:Program
MyAtoi	.\string2integer_atoi\Program.cs	/^    public int MyAtoi(string str) {$/;"	m	class:Solution
NextPermutation	.\next_permutation\Program.cs	/^        public void NextPermutation(int[] nums) {$/;"	m	class:next_permutation.Program
Program	.\combination_sum\Program.cs	/^    class Program$/;"	c	namespace:combination_sum
Program	.\find_substring\Program.cs	/^    class Program$/;"	c	namespace:find_substring
Program	.\first_missing_possitive\Program.cs	/^    class Program$/;"	c	namespace:first_missing_possitive
Program	.\generate_parenthesis\Program.cs	/^    class Program$/;"	c	namespace:generateParenthesis
Program	.\int2roman\Program.cs	/^        public Program() $/;"	m	class:int2roman.Program
Program	.\int2roman\Program.cs	/^    class Program$/;"	c	namespace:int2roman
Program	.\is_match\Program.cs	/^    class Program$/;"	c	namespace:is_match
Program	.\is_valid_sudoku\Program.cs	/^        public Program() {$/;"	m	class:is_valid_sudoku.Program
Program	.\is_valid_sudoku\Program.cs	/^    class Program$/;"	c	namespace:is_valid_sudoku
Program	.\letterCombinations\Program.cs	/^    public class Program$/;"	c	namespace:letterCombinations
Program	.\letter_combinations\Program.cs	/^    public class Program$/;"	c	namespace:letterCombinations
Program	.\longest_valid_parentheses\Program.cs	/^    class Program$/;"	c	namespace:longest_valid_parentheses
Program	.\max_area\Program.cs	/^public class Program {$/;"	c
Program	.\next_permutation\Program.cs	/^    class Program$/;"	c	namespace:next_permutation
Program	.\permute\Program.cs	/^    class Program$/;"	c	namespace:permute
Program	.\removeNthFromEnd\Program.cs	/^    public class Program$/;"	c	namespace:removeNthFromEnd
Program	.\remove_nth_from_end\Program.cs	/^    public class Program$/;"	c	namespace:removeNthFromEnd
Program	.\search\Program.cs	/^    class Program$/;"	c	namespace:search
Program	.\search_range\Program.cs	/^    class Program$/;"	c	namespace:search_range
Program	.\swapPairs\Program.cs	/^    class Program$/;"	c	namespace:swapPairs
Program	.\three_sum\Program.cs	/^    class Program$/;"	c	namespace:three_sum
Program	.\three_sum_closest\Program.cs	/^    class Program$/;"	c	namespace:three_sum_closest
RemoveNthFromEnd	.\removeNthFromEnd\Program.cs	/^        public ListNode RemoveNthFromEnd(ListNode head, int n) {$/;"	m	class:removeNthFromEnd.Program
RemoveNthFromEnd	.\remove_nth_from_end\Program.cs	/^        public ListNode RemoveNthFromEnd(ListNode head, int n) {$/;"	m	class:removeNthFromEnd.Program
ResetHash	.\is_valid_sudoku\Program.cs	/^        public void ResetHash() {$/;"	m	class:is_valid_sudoku.Program
Reverse	.\reverse_int\Program.cs	/^        public int Reverse(int x) {$/;"	m	class:reverse_int.Solution
Search	.\search\Program.cs	/^        public int Search(int[] nums, int target) {$/;"	m	class:search.Program
SearchRange	.\search_range\Program.cs	/^        public int[] SearchRange(int[] nums, int target) {$/;"	m	class:search_range.Program
Solution	.\add_two_numbers\program\Program.cs	/^public class Solution {$/;"	c	namespace:leetcode
Solution	.\combination_sum_2\Program.cs	/^public class Solution {$/;"	c	namespace:combination_sum_2
Solution	.\convert\Program.cs	/^    class Solution$/;"	c	namespace:Convert
Solution	.\divide_two_integers\Program.cs	/^public class Solution {$/;"	c
Solution	.\find_median_sorted_arrays\Program.cs	/^    public class Solution $/;"	c	namespace:find_median_sorted_arrays
Solution	.\longest_palindrome\Program.cs	/^    class Solution $/;"	c	namespace:longest_palindrome
Solution	.\longest_substring_without_repeating_characters\Program.cs	/^public class Solution {$/;"	c	namespace:longest_substring_without_repeating_characters
Solution	.\palindrome_number\Program.cs	/^    class Solution $/;"	c	namespace:palindrome_number
Solution	.\reverse_int\Program.cs	/^    public class Solution {$/;"	c	namespace:reverse_int
Solution	.\string2integer_atoi\Program.cs	/^public class Solution {$/;"	c
Solution	.\trapping_rain_water\Program.cs	/^    class Solution$/;"	c	namespace:trapping_rain_water
Solution	.\two_sum\Program.cs	/^public class Solution {$/;"	c
SwapPairs	.\swapPairs\Program.cs	/^        public ListNode SwapPairs(ListNode head) {$/;"	m	class:swapPairs.Program
ThreeSum	.\three_sum\Program.cs	/^        public IList<IList<int>> ThreeSum(int[] nums) {$/;"	m	class:three_sum.Program
ThreeSumClosest	.\three_sum_closest\Program.cs	/^        public int ThreeSumClosest(int[] nums, int target) {$/;"	m	class:three_sum_closest.Program
Trap	.\trapping_rain_water\Program.cs	/^        public int Trap(int[] height) {$/;"	m	class:trapping_rain_water.Solution
TwoSum	.\two_sum\Program.cs	/^    public int[] TwoSum(int[] nums, int target) {$/;"	m	class:Solution
_CheckValid	.\is_valid_sudoku\Program.cs	/^        private bool _CheckValid(char ele) {$/;"	m	class:is_valid_sudoku.Program	file:
_hash	.\is_valid_sudoku\Program.cs	/^        private bool[] _hash;$/;"	f	class:is_valid_sudoku.Program	file:
_lut	.\int2roman\Program.cs	/^        private Dictionary<int, string> _lut;$/;"	f	class:int2roman.Program	file:
combination_sum	.\combination_sum\Program.cs	/^namespace combination_sum$/;"	n
combination_sum_2	.\combination_sum_2\Program.cs	/^namespace combination_sum_2$/;"	n
find_left	.\search_range\Program.cs	/^        public int find_left(int[] nums, int target) {$/;"	m	class:search_range.Program
find_median_sorted_arrays	.\find_median_sorted_arrays\Program.cs	/^namespace find_median_sorted_arrays$/;"	n
find_right	.\search_range\Program.cs	/^        public int find_right(int[] nums, int target, int left) {$/;"	m	class:search_range.Program
find_substring	.\find_substring\Program.cs	/^namespace find_substring$/;"	n
first_missing_possitive	.\first_missing_possitive\Program.cs	/^namespace first_missing_possitive$/;"	n
generateParenthesis	.\generate_parenthesis\Program.cs	/^namespace generateParenthesis$/;"	n
int2roman	.\int2roman\Program.cs	/^namespace int2roman$/;"	n
isMatch	.\is_match\Program.cs	/^        bool isMatch(string s, string p) {$/;"	m	class:is_match.Program	file:
is_match	.\is_match\Program.cs	/^namespace is_match$/;"	n
is_valid_sudoku	.\is_valid_sudoku\Program.cs	/^namespace is_valid_sudoku$/;"	n
leetcode	.\add_two_numbers\program\Program.cs	/^namespace leetcode{$/;"	n
letterCombinations	.\letterCombinations\Program.cs	/^namespace letterCombinations$/;"	n
letterCombinations	.\letter_combinations\Program.cs	/^namespace letterCombinations$/;"	n
longest_palindrome	.\longest_palindrome\Program.cs	/^namespace longest_palindrome$/;"	n
longest_substring_without_repeating_characters	.\longest_substring_without_repeating_characters\Program.cs	/^namespace longest_substring_without_repeating_characters$/;"	n
longest_valid_parentheses	.\longest_valid_parentheses\Program.cs	/^namespace longest_valid_parentheses$/;"	n
next	.\add_two_numbers\program\Program.cs	/^    public ListNode next;$/;"	f	class:leetcode.ListNode
next	.\removeNthFromEnd\Program.cs	/^        public ListNode next;$/;"	f	class:removeNthFromEnd.ListNode
next	.\remove_nth_from_end\Program.cs	/^        public ListNode next;$/;"	f	class:removeNthFromEnd.ListNode
next	.\swapPairs\Program.cs	/^        public ListNode next;$/;"	f	class:swapPairs.ListNode
next_permutation	.\next_permutation\Program.cs	/^namespace next_permutation$/;"	n
palindromeLength	.\longest_palindrome\Program.cs	/^        int palindromeLength(string s, int i, int j) {$/;"	m	class:longest_palindrome.Solution	file:
palindrome_number	.\palindrome_number\Program.cs	/^namespace palindrome_number$/;"	n
permute	.\permute\Program.cs	/^namespace permute$/;"	n
removeNthFromEnd	.\removeNthFromEnd\Program.cs	/^namespace removeNthFromEnd$/;"	n
removeNthFromEnd	.\remove_nth_from_end\Program.cs	/^namespace removeNthFromEnd$/;"	n
reverse_int	.\reverse_int\Program.cs	/^namespace reverse_int$/;"	n
search	.\search\Program.cs	/^namespace search$/;"	n
search_range	.\search_range\Program.cs	/^namespace search_range$/;"	n
swapPairs	.\swapPairs\Program.cs	/^namespace swapPairs$/;"	n
three_sum	.\three_sum\Program.cs	/^namespace three_sum$/;"	n
three_sum_closest	.\three_sum_closest\Program.cs	/^namespace three_sum_closest$/;"	n
trapping_rain_water	.\trapping_rain_water\Program.cs	/^namespace trapping_rain_water$/;"	n
val	.\add_two_numbers\program\Program.cs	/^    public int val;$/;"	f	class:leetcode.ListNode
val	.\removeNthFromEnd\Program.cs	/^        public int val;$/;"	f	class:removeNthFromEnd.ListNode
val	.\remove_nth_from_end\Program.cs	/^        public int val;$/;"	f	class:removeNthFromEnd.ListNode
val	.\swapPairs\Program.cs	/^        public int val;$/;"	f	class:swapPairs.ListNode
